version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: ./compose/local/flask/Dockerfile
    restart: always
    container_name: backend
    # '/start' is the shell script used to run the service
    command: /start
    # this volume is used to map the files and folders on the host to the container
    # so if we change code on the host, code in the docker container will also be changed
    volumes:
      - ./backend:/app
    ports:
      - '5000:5000'
    environment:
      - FLASK_DEBUG=1
      - FLASK_APP=app
      - DATABASE_URL=postgresql://postgres:postgres@db/postgres
    env_file:
      - .env/dev/.env
    depends_on:
      - redis
      - db

  db:
    image: postgres
    restart: always
    container_name: db
    environment:
      - POSTGRES_PASSWORD=postgres

  redis:
    image: redis:7-alpine
    restart: always
    container_name: redis

  celery_worker:
    build:
      context: ./backend
      dockerfile: ./compose/local/flask/Dockerfile
    restart: always
    container_name: celery_worker
    image: celery_worker
    command: /start-celeryworker
    volumes:
      - ./backend:/app
    env_file:
      - .env/dev/.env
    environment:
      - FLASK_APP=app
    depends_on:
      - redis
      - db

  frontend:
    image: frontend-i
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-c
    volumes:
      - ./frontend/src:/frontend/src
      - ./frontend/tailwind.config.js:/frontend/tailwind.config.js
      - ./frontend/tsconfig.json:/frontend/tsconfig.json
      # - ./frontend/tsconfig.json:/frontend/tsconfig.json
      # - node_modules:/frontend/node_modules
    environment:
      - WATCHPACK_POLLING=true
    ports:
      - "3000:3000"
    depends_on:
      - backend

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

# volumes:
#   node_modules: